// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file glyphs.proto (package llmr.glyphs, syntax proto2)
/* eslint-disable */
// @ts-nocheck

// Protocol Version 1

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf";
import { Message, proto2 } from "@bufbuild/protobuf";

/**
 * Stores a glyph with metrics and optional SDF bitmap information.
 *
 * @generated from message llmr.glyphs.glyph
 */
export class glyph extends Message<glyph> {
  /**
   * @generated from field: required uint32 id = 1;
   */
  id?: number;

  /**
   * A signed distance field of the glyph with a border of 3 pixels.
   *
   * @generated from field: optional bytes bitmap = 2;
   */
  bitmap?: Uint8Array;

  /**
   * Glyph metrics.
   *
   * @generated from field: required uint32 width = 3;
   */
  width?: number;

  /**
   * @generated from field: required uint32 height = 4;
   */
  height?: number;

  /**
   * @generated from field: required sint32 left = 5;
   */
  left?: number;

  /**
   * @generated from field: required sint32 top = 6;
   */
  top?: number;

  /**
   * @generated from field: required uint32 advance = 7;
   */
  advance?: number;

  constructor(data?: PartialMessage<glyph>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "llmr.glyphs.glyph";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    {
      no: 1,
      name: "id",
      kind: "scalar",
      T: 13 /* ScalarType.UINT32 */,
      req: true,
    },
    {
      no: 2,
      name: "bitmap",
      kind: "scalar",
      T: 12 /* ScalarType.BYTES */,
      opt: true,
    },
    {
      no: 3,
      name: "width",
      kind: "scalar",
      T: 13 /* ScalarType.UINT32 */,
      req: true,
    },
    {
      no: 4,
      name: "height",
      kind: "scalar",
      T: 13 /* ScalarType.UINT32 */,
      req: true,
    },
    {
      no: 5,
      name: "left",
      kind: "scalar",
      T: 17 /* ScalarType.SINT32 */,
      req: true,
    },
    {
      no: 6,
      name: "top",
      kind: "scalar",
      T: 17 /* ScalarType.SINT32 */,
      req: true,
    },
    {
      no: 7,
      name: "advance",
      kind: "scalar",
      T: 13 /* ScalarType.UINT32 */,
      req: true,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): glyph {
    return new glyph().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): glyph {
    return new glyph().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): glyph {
    return new glyph().fromJsonString(jsonString, options);
  }

  static equals(
    a: glyph | PlainMessage<glyph> | undefined,
    b: glyph | PlainMessage<glyph> | undefined,
  ): boolean {
    return proto2.util.equals(glyph, a, b);
  }
}

/**
 * Stores fontstack information and a list of faces.
 *
 * @generated from message llmr.glyphs.fontstack
 */
export class fontstack extends Message<fontstack> {
  /**
   * @generated from field: required string name = 1;
   */
  name?: string;

  /**
   * @generated from field: required string range = 2;
   */
  range?: string;

  /**
   * @generated from field: repeated llmr.glyphs.glyph glyphs = 3;
   */
  glyphs: glyph[] = [];

  constructor(data?: PartialMessage<fontstack>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "llmr.glyphs.fontstack";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    {
      no: 1,
      name: "name",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
      req: true,
    },
    {
      no: 2,
      name: "range",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
      req: true,
    },
    { no: 3, name: "glyphs", kind: "message", T: glyph, repeated: true },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): fontstack {
    return new fontstack().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): fontstack {
    return new fontstack().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): fontstack {
    return new fontstack().fromJsonString(jsonString, options);
  }

  static equals(
    a: fontstack | PlainMessage<fontstack> | undefined,
    b: fontstack | PlainMessage<fontstack> | undefined,
  ): boolean {
    return proto2.util.equals(fontstack, a, b);
  }
}

/**
 * @generated from message llmr.glyphs.glyphs
 */
export class glyphs extends Message<glyphs> {
  /**
   * @generated from field: repeated llmr.glyphs.fontstack stacks = 1;
   */
  stacks: fontstack[] = [];

  constructor(data?: PartialMessage<glyphs>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "llmr.glyphs.glyphs";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "stacks", kind: "message", T: fontstack, repeated: true },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): glyphs {
    return new glyphs().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): glyphs {
    return new glyphs().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): glyphs {
    return new glyphs().fromJsonString(jsonString, options);
  }

  static equals(
    a: glyphs | PlainMessage<glyphs> | undefined,
    b: glyphs | PlainMessage<glyphs> | undefined,
  ): boolean {
    return proto2.util.equals(glyphs, a, b);
  }
}
